- name: Render cluster_settings
  template:
    src: cluster_settings.json.j2
    dest: /tmp/cluster_settings.json
    mode: '0755'

- name: Read cluster_settings file
  slurp:
    src: /tmp/cluster_settings.json
  register: cluster_settings_content

- name: Register cluster
  uri:
    url: "{{ rancher_url }}/v1/provisioning.cattle.io.clusters"
    method: POST
    headers:
      Authorization: "{{ auth_token }}"
      Content-Type: "application/json"
    body: "{{ cluster_settings_content.content | b64decode }}"
    body_format: json
    return_content: yes
    validate_certs: no
  failed_when: cluster_registration_response.status != 200 and cluster_registration_response.status != 201
  register: cluster_registration_response

- name: Get cluster details
  uri:
    url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
    method: GET
    headers:
      Authorization: "{{ auth_token }}"
      Content-Type: application/json
    return_content: yes
    validate_certs: false
    status_code: 200
  register: cluster_response

- name: Extract cluster ID
  set_fact:
    cluster_id: "{{ cluster_response.json.data[0].id }}"
  when: cluster_response.json.data | length > 0

- name: Fail if cluster ID not found
  fail:
    msg: "No cluster found with name {{ cluster_name }}"
  when: cluster_id is not defined

- name: Print some stuff
  debug: 
    msg: "{{ cluster_id }}"
  when: cluster_id is defined

- name: Get cluster registration tokens
  uri:
    url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
    method: GET
    headers:
      Authorization: "{{ auth_token }}"
    return_content: yes
    validate_certs: false
    status_code: 200
  register: token_response

- name: Extract insecure node command
  set_fact:
    insecure_node_command: "{{ token_response.json.data[0].insecureNodeCommand | default('', true) }}"

- name: Fail if insecure node command not found
  fail:
    msg: "No valid insecure node command found"
  when: insecure_node_command == ''

- name: Display final URL with flags
  debug:
    msg: "{{ insecure_node_command }} --etcd --controlplane --worker"

- name: Set command to register
  set_fact:
    registration_command: "{{ insecure_node_command }} --etcd --controlplane --worker"

- name: Set dynamic IP addresses
  ansible.builtin.set_fact:
    master_ip: "{{ ansible_default_ipv4.address }}"
    internal_ip: "{{ ansible_default_ipv4.address }}"
  when: ansible_default_ipv4 is defined

- name: Render k3s install script to temporary file
  template:
    src: k3s_server_install.ssh.j2
    dest: /tmp/k3s_install_command.sh
    mode: '0755'

- name: Run the k3s install script
  shell: /tmp/k3s_install_command.sh

- name: Ensure rancher-system-agent.service is restarted
  systemd:
    name: rancher-system-agent.service
    state: restarted

- name: Wait for Rancher to write necessary files
  pause:
    seconds: 30

- name: Fetch current cattle-cluster-agent deployment YAML
  command: >
    sudo k3s kubectl patch deployment cattle-cluster-agent -n cattle-system -p '{"spec":{"template":{"spec":{"dnsPolicy": "ClusterFirstWithHostNet", "hostNetwork": true}}}}'
  register: deployment_yaml

- name: Set nvidia runtime support
  shell: k3s kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.17.0/deployments/static/nvidia-device-plugin.yml

- name: Set dockerhub registration token
  shell: sudo k3s kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=larsflikweert --docker-password={{ dockerhub_token }} --docker-email=lars@flikweertvision.nl

- name: Wait for 3 minutes to ensure components are ready
  wait_for:
    timeout: 180