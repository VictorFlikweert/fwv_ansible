- name: List ArgoCD applications
  shell: |
    sudo argocd app list
  delegate_to: "{{ main_cluster_ip }}"
  become: true
  register: argocd_app_list
  failed_when: argocd_app_list.rc != 0
  vars:
    ansible_user: fwv
    ansible_sudo_pass: "{{ main_cluster_pass }}"
  ignore_errors: true

- name: Fail if listing ArgoCD applications failed
  fail:
    msg: "{{main_cluster_ip}} has to relogin to ArgoCD, please do so by hand: 'sudo argocd login localhost:30503'"
  when: argocd_app_list.rc != 0

# - name: Refresh ArgoCD token if expired
#   shell: |
#     sudo argocd login --username admin --password "{{ argocd_admin_password }}" --insecure
#   delegate_to: "{{ main_cluster_ip }}"
#   become: true
#   when: "'rpc error: code = Unauthenticated desc = invalid session: Token is expired' in argocd_app_list.stderr"
#   vars:
#     ansible_user: fwv
#     ansible_sudo_pass: "{{ main_cluster_pass }}"

- name: Test if the cluster can reach the PPC
  ansible.builtin.command:
    cmd: "ping -c 2 {{ hostvars[groups['master'][0]]['ansible_host']}}"
  register: ping_result
  failed_when: ping_result.rc != 0

- name: Ensure rancher_url is set
  ansible.builtin.assert:
    that:
      - rancher_url is defined
      - rancher_url | length > 0
    fail_msg: "The variable 'rancher_url' is not set. (Check ./roles/panel_pc/vars/main.yml)"
    success_msg: "The variable 'rancher_url' is set."

- name: Ensure dockerhub_token is set
  ansible.builtin.assert:
    that:
      - dockerhub_token is defined
      - dockerhub_token | length > 0
    fail_msg: "The variable 'dockerhub_token' is not set. (Check ./roles/panel_pc/vars/main.yml)"
    success_msg: "The variable 'dockerhub_token' is set."

- name: Ensure main_cluster_pass is set
  ansible.builtin.assert:
    that:
      - main_cluster_pass is defined
      - main_cluster_pass | length > 0
    fail_msg: "The variable 'main_cluster_pass' is not set. (Check ./roles/panel_pc/vars/main.yml)"
    success_msg: "The variable 'main_cluster_pass' is set."

- name: Check available disk space on root partition
  ansible.builtin.command: df -h /
  register: disk_space

- name: Ensure at least 5GB of disk space is available
  ansible.builtin.assert:
    that:
      - disk_space.stdout | regex_search('\d+(?=G)') | int >= 5
    fail_msg: "Less than 5GB of disk space is available on the root partition."
    success_msg: "Sufficient disk space is available on the root partition."

- name: Test if the PPC can reach the main cluster
  ansible.builtin.command:
    cmd: "ping -c 2 {{ main_cluster_ip }}"
  register: ping_result
  failed_when: ping_result.rc != 0